
// Code generated by SqlGen. DO NOT EDIT.

package {{.PackageName}}

import (
	"context"
	"time"

	"gorm.io/gorm"
)


var  _ {{.InterfaceName}}Db = (*default{{.StructName}}Db)(nil)

const TableName{{.StructName}} = "{{.TableName}}"

type (
	{{.InterfaceName}}Db interface {
		Insert(ctx context.Context,data *{{.StructName}}) ({{.PrimaryKeyType}}, error)
		BatchInsert(ctx context.Context,list []*{{.StructName}}) ([]{{.PrimaryKeyType}}, error)

		FindOne(ctx context.Context, id {{.PrimaryKeyType}}) (*{{.StructName}}, error)
		FindBy(ctx context.Context, id int64, columns ...string) (*{{.StructName}}, error)

		Update(ctx context.Context, newData *{{.StructName}}, column []string)  (int64, error)
		UpdateColumns(ctx context.Context, id {{.PrimaryKeyType}}, newData map[string]any)  (int64, error)

		SoftDelete(ctx context.Context,ids []{{.PrimaryKeyType}}) error
		Delete(ctx context.Context,ids []{{.PrimaryKeyType}}) error

	}

	default{{.StructName}}Db struct {
		*Conn
		model *{{.StructName}}
	}

	// {{.StructName}} {{.StructComment}}
	{{.StructName}} struct { {{range .Fields}}
        {{.Name}} {{.Type}} `{{.Tags}}` {{.CommentTag}} {{end}}
    }
)


func (*{{.StructName}}) TableName() string {
	return TableName{{.StructName}}
}

func new{{.StructName}}Db(c *Conn) *default{{.StructName}}Db {
	return &default{{.StructName}}Db{
		Conn:   c,
		model:    &{{.StructName}}{},
	}
}

func (d *default{{.StructName}}Db) Insert(ctx context.Context,data *{{.StructName}}) ({{.PrimaryKeyType}}, error) {
    data.Id = 0
	err := d.WithContext(ctx).Create(data).Error
	if err != nil {
		return 0,err
	}
	return data.Id,nil
}

func (d *default{{.StructName}}Db) BatchInsert(ctx context.Context,list []*{{.StructName}}) ([]{{.PrimaryKeyType}}, error) {
	err := d.WithContext(ctx).Create(list).Error
	if err != nil {
		return nil,err
	}
    ids := make([]{{.PrimaryKeyType}}, len(list))
	for i, v := range list {
		ids[i] = v.Id
	}
	return ids,nil
}


func (d *default{{.StructName}}Db) FindOne(ctx context.Context,id {{.PrimaryKeyType}}) (*{{.StructName}}, error) {
    result := &{{.StructName}}{}
	err := d.WithContext(ctx).First(result,id).Error
    if  err != nil {
		return nil, err
	}
	return result, nil
}

func (d *default{{.StructName}}Db) FindBy(ctx context.Context, id int64, columns ...string) (*{{.StructName}}, error) {
	result := &{{.StructName}}{}
	err := d.WithContext(ctx).Select(columns).First(result, id).Error
	if err != nil {
		return nil, err
	}
	return result, nil
}

func (d *default{{.StructName}}Db) Update(ctx context.Context,newData *{{.StructName}}, column []string)  (int64, error)  {
	engine := d.WithContext(ctx).Model(d.model)
	if len(column) > 0 {
		engine = engine.Select(column)
	}
	result := engine.Omit("id").Where(" id = ? ", newData.Id).Updates(newData)
	return result.RowsAffected, result.Error
}

func (d *default{{.StructName}}Db) UpdateColumns(ctx context.Context,id {{.PrimaryKeyType}}, newData map[string]any)  (int64, error)  {
	result := d.WithContext(ctx).Model(d.model).Where(" id = ? ", id).Updates(newData)
	return result.RowsAffected, result.Error
}


func (d *default{{.StructName}}Db) SoftDelete(ctx context.Context,ids []{{.PrimaryKeyType}}) error {
	err :=  d.WithContext(ctx).Where(" id  IN (?)  ", ids).Delete(d.model).Error
	return err
}

func (d *default{{.StructName}}Db) Delete(ctx context.Context, ids []{{.PrimaryKeyType}}) error {
	err := d.WithContext(ctx).Where(" id  IN (?)  ", ids).Unscoped().Delete(d.model).Error
	return err
}